# server.py
from mcp.server.fastmcp import FastMCP
from openai import OpenAI
import os
from dotenv import load_dotenv
from service.places import chat_with_places_assistant
from service.services import generate_summary, perform_general_query, realtime_web_search

# Load environment variables from .env file
load_dotenv()

# Create an MCP server instance named "Demo"
host=os.getenv("MCP_HOST", "0.0.0.0")
port=os.getenv("MCP_PORT", 8000)
# Provide host and port during instantiation

mcp = FastMCP("Demo", host=host, port=port)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Initialize OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)


@mcp.tool()
def insight_scope(user_query: str) -> str:
    """
    InsightScope: An intelligent real-time web analysis agent.

    This tool performs dynamic, real-time web research powered by GPT-4o with browsing capabilities.
    It extracts and summarizes the most relevant, up-to-date information from trusted sources,
    including news, websites, documentation, and user reviews.

    Key Features:
    - Context-aware web search tailored to the user's query.
    - Real-time data extraction from authoritative sites.
    - Summarized insights with clickable source links.
    - Useful for market research, trend analysis, product scouting, or verifying recent developments.

    Input:
    - user_query (str): A natural-language query or topic of interest.

    Output:
    - A concise, informative summary with real-time findings and embedded links.

    Example Use Case:
    insight_scope("Latest updates on Apple's Vision Pro release")
    """
    return realtime_web_search(user_query)



@mcp.tool()
def quickclarity(user_query: str) -> str:
    """
    QuickClarity: A fast, general-purpose assistant for instant answers.

    This tool uses a lightweight language model (e.g., GPT-3.5-Turbo) to quickly respond to everyday questions,
    explanations, and task prompts. It delivers fast, to-the-point answers suitable for general use where speed
    and clarity matter more than deep contextual analysis.

    Key Features:
    - Fast response time using an efficient model
    - Ideal for simple questions, clarifications, definitions, rewrites, and logic tasks
    - Minimal setup, low overhead—great for casual or utility agents in workflows

    Input:
    - user_query (str): A natural language prompt or question

    Output:
    - A concise, relevant answer generated by the assistant

    Example Use Case:
    quickclarity("What are the benefits of intermittent fasting?")
    """
    return perform_general_query(user_query)


@mcp.tool()
def corebrief(long_text: str):
    """
    CoreBrief: A professional-grade summarization agent.

    This tool condenses long-form content—such as articles, reports, or documents—into concise, engaging summaries,
    preserving essential information, tone, and context. Ideal for professionals, analysts, and knowledge workers
    who need to digest complex material quickly.

    Key Features:
    - Extracts core ideas and removes fluff or repetition
    - Maintains original intent and logical flow
    - Suitable for emails, research papers, policy docs, meeting transcripts, and more
    - Delivers polished output that reads naturally

    Input:
    - long_text (str): The full text content to be summarized (e.g., multi-paragraph article or pasted text).

    Output:
    - A high-quality, human-readable summary that reflects the core message.

    Example Use Case:
    corebrief(open("weekly_report.txt").read())
    """
    return generate_summary(long_text)

@mcp.add_tool
def geo_whisper(user_query: str) -> str:
    """
    GeoWhisper: A conversational location intelligence agent.

    This tool taps into location services (e.g., Google Places API) to retrieve accurate, real-time information 
    about places, businesses, landmarks, or services based on user queries.

    Key Features:
    - Place search using natural language (e.g., "Best cafes near me", "Hotels in Manali with Wi-Fi")
    - Returns structured details like address, ratings, hours, and contact info
    - Great for travel planning, local exploration, or service recommendations

    Input:
    - user_query (str): A location-related question or keyword phrase (e.g., "24/7 pharmacy in Delhi").

    Output:
    - A summarized, conversational result listing matching places with key details.

    Example Use Case:
    geo_whisper("Vegan restaurants near Juhu Beach")
    """
    return chat_with_places_assistant(user_query,client)


# Run the server for local development or testing
if __name__ == "__main__":
    mcp.run(transport="sse")

